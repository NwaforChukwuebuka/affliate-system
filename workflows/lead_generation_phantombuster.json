{
  "name": "My workflow 55",
  "nodes": [
    {
      "parameters": {},
      "id": "e97fe269-411d-45d3-a065-e74dd2ab1484",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1980,
        75
      ]
    },
    {
      "parameters": {
        "functionCode": "// Configuration for PhantomBuster Twitter Search\n// Using simple keywords that reliably return results\nconst searchConfig = {\n  phantomId: \"3898524406047903\",\n  input: {\n    // Simple, effective search terms\n    searches: [\n      \"marketing\"],\n    numberOfProfilesPerSearch: 1, // Increase now that we know it works\n    csvName: \"twitter-leads-\" + new Date().toISOString().split('T')[0],\n    sessionCookie: \"\"\n  }\n};\n\nconsole.log('Launching phantom with proven keywords:', searchConfig);\nreturn [{ json: searchConfig }];"
      },
      "id": "a2b90e30-fcc3-49bd-bb8b-e48abe3a8d10",
      "name": "Configure Phantom Search",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1760,
        75
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.phantombuster.com/api/v2/agents/launch",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Phantombuster-Key",
              "value": "dyzMboomwTCfyyPVYOaLJBMVv7Ai4SI6pseoyMPZvb0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "3898524406047903"
            }
          ]
        },
        "options": {}
      },
      "id": "ef6250d2-1e98-4810-ba0f-1c9c27ed26aa",
      "name": "Launch PhantomBuster",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -1540,
        80
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "DsTs0Vxjm1TZjLMk",
          "name": "PhantomBuster API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Handle PhantomBuster launch response and extract container ID\nconst response = $json;\n\n// Log the full response for debugging\nconsole.log('PhantomBuster Launch Response:', JSON.stringify(response, null, 2));\n\n// PhantomBuster typically returns the container ID in the response\n// Check for different possible response formats\nlet containerId = null;\n\nif (response.containerId) {\n  containerId = response.containerId;\n} else if (response.data && response.data.containerId) {\n  containerId = response.data.containerId;\n} else if (response.id) {\n  containerId = response.id;\n} else if (response.data && response.data.id) {\n  containerId = response.data.id;\n}\n\nif (!containerId) {\n  console.error('No container ID found in PhantomBuster response:', response);\n  throw new Error('PhantomBuster launch failed - no container ID returned');\n}\n\nconsole.log('Extracted container ID:', containerId);\n\nreturn [{\n  json: {\n    containerId: containerId,\n    launchStatus: 'success',\n    timestamp: new Date().toISOString(),\n    fullResponse: response\n  }\n}];"
      },
      "id": "3ac23c91-d944-4b23-8bd8-b240de2948cc",
      "name": "Process Launch Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1320,
        75
      ]
    },
    {
      "parameters": {
        "amount": 5,
        "unit": "minutes"
      },
      "id": "e2adadb1-6be3-4de8-977c-7d1ab9eb27ee",
      "name": "Wait for Phantom Completion",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        -1100,
        75
      ],
      "webhookId": "4a2eb907-02e5-4f4f-b9a5-916cda6895be"
    },
    {
      "parameters": {
        "url": "https://api.phantombuster.com/api/v2/containers/fetch-output?id={{$node['Process Launch Response'].json.containerId}}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Phantombuster-Key",
              "value": "dyzMboomwTCfyyPVYOaLJBMVv7Ai4SI6pseoyMPZvb0"
            }
          ]
        },
        "options": {}
      },
      "id": "14f7a8bb-22f4-4fe7-b3de-fe68c7b76f34",
      "name": "Fetch Phantom Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        -880,
        80
      ]
    },
    {
      "parameters": {
        "functionCode": "// Process PhantomBuster results and normalize for our database\n// Handle CSV format: tweetDate,twitterId,handle,text,profileUrl,name,tweetLink,timestamp,query\nconst phantomData = $json.data || [];\n\nif (!Array.isArray(phantomData)) {\n  console.log('No data received from PhantomBuster or invalid format');\n  return [];\n}\n\nconst processedLeads = phantomData.map(profile => {\n  // Extract email from tweet text or bio if available\n  const emailMatch = profile.text ? profile.text.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/) : null;\n  const extractedEmail = emailMatch ? emailMatch[0] : null;\n  \n  // Generate potential email if not found\n  const potentialEmail = extractedEmail || (\n    profile.handle ? \n    `${profile.handle.replace(/[^a-zA-Z0-9]/g, '')}@gmail.com` : \n    null\n  );\n\n  return {\n    source: 'twitter',\n    name: profile.name || profile.handle,\n    username: profile.handle,\n    email: potentialEmail,\n    profile_url: profile.profileUrl || `https://twitter.com/${profile.handle}`,\n    follower_count: 0, // Not available in this format\n    bio: profile.text || '', // Using tweet text as bio/description\n    verified: false, // Not available in this format\n    location: '',\n    // Additional fields from new format\n    twitter_id: profile.twitterId,\n    tweet_link: profile.tweetLink,\n    tweet_date: profile.tweetDate,\n    search_query: profile.query\n  };\n});\n\n// Filter out profiles without basic information\nconst validLeads = processedLeads.filter(lead => \n  lead.username && \n  lead.bio && \n  lead.username.length > 2 // Basic username validation\n);\n\nconsole.log(`Processed ${phantomData.length} profiles, ${validLeads.length} valid leads`);\n\nreturn validLeads.map(lead => ({ json: lead }));"
      },
      "id": "221add29-1585-4e91-927b-21f39872d6c6",
      "name": "Process Phantom Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -660,
        75
      ]
    },
    {
      "parameters": {
        "functionCode": "// Check for duplicates before inserting\nconst currentLead = $json;\n\n// Create a query to check if this username already exists\nreturn [{\n  json: {\n    ...currentLead,\n    checkQuery: `SELECT COUNT(*) as count FROM leads WHERE username = '${currentLead.username}' AND source = 'twitter'`\n  }\n}];"
      },
      "id": "2f1589b9-5dc1-488e-9b7e-98ee758b4caf",
      "name": "Prepare Duplicate Check",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -440,
        75
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{$json.checkQuery}}",
        "additionalFields": {}
      },
      "id": "a09ea3f5-b813-4710-8241-eea87db8f041",
      "name": "Check for Duplicates",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -220,
        75
      ],
      "credentials": {
        "postgres": {
          "id": "sPhJkZjIPJlq5FBn",
          "name": "PostgreSQL Affiliate DB"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.count}}",
              "value2": "0"
            }
          ]
        }
      },
      "id": "1171b293-dbaa-470b-a28a-1f04e8c42bff",
      "name": "Filter New Leads Only",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        0,
        75
      ]
    },
    {
      "parameters": {
        "table": "leads",
        "columns": "source, name, username, email, profile_url, follower_count, bio, verified, location",
        "additionalFields": {
          "mode": "independently"
        }
      },
      "id": "8c336aed-aa0b-403d-a371-c4eb489c122a",
      "name": "Insert New Leads to DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        220,
        0
      ]
    },
    {
      "parameters": {
        "functionCode": "// Final results summary\nconst successfulInserts = $items('Insert New Leads to DB') || [];\nconst skippedDuplicates = $items('Filter New Leads Only', 1) || [];\nconst totalProcessed = $items('Process Phantom Data') || [];\n\nconst summary = {\n  message: 'PhantomBuster lead generation completed',\n  total_profiles_found: totalProcessed.length,\n  new_leads_inserted: successfulInserts.length,\n  duplicates_skipped: skippedDuplicates.length,\n  timestamp: new Date().toISOString(),\n  next_steps: [\n    'Run lead enrichment workflow',\n    'Review leads for quality',\n    'Start outreach campaigns'\n  ]\n};\n\nconsole.log('PhantomBuster Lead Generation Summary:', summary);\n\nreturn [{ json: summary }];"
      },
      "id": "0ac4b3b0-1aca-42d8-99c7-19aa075b395c",
      "name": "Log Final Results",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        440,
        75
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Configure Phantom Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Configure Phantom Search": {
      "main": [
        [
          {
            "node": "Launch PhantomBuster",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Launch PhantomBuster": {
      "main": [
        [
          {
            "node": "Process Launch Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Launch Response": {
      "main": [
        [
          {
            "node": "Wait for Phantom Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Phantom Completion": {
      "main": [
        [
          {
            "node": "Fetch Phantom Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Phantom Results": {
      "main": [
        [
          {
            "node": "Process Phantom Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Phantom Data": {
      "main": [
        [
          {
            "node": "Prepare Duplicate Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Duplicate Check": {
      "main": [
        [
          {
            "node": "Check for Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Duplicates": {
      "main": [
        [
          {
            "node": "Filter New Leads Only",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter New Leads Only": {
      "main": [
        [
          {
            "node": "Insert New Leads to DB",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Final Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Final Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert New Leads to DB": {
      "main": [
        [
          {
            "node": "Log Final Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0cee84b1-2d7b-46aa-97fc-99b1dd3c55b0",
  "meta": {
    "instanceId": "da6da941c2b65390a6e3f921749640fb52a4b90b0aee4aa6b31fd289f858bb70"
  },
  "id": "MYcDEBy9LOuyeuqz",
  "tags": []
}